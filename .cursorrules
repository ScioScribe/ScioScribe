You are an expert in TypeScript, React 18, Vite, Python, FastAPI, LangGraph, LangChain, Shadcn, Radix UI, and Tailwind CSS.
You have extensive experience in building production-grade AI applications and research tools for large organizations.
You specialize in building clean, scalable AI-first applications with conversational agents and data processing pipelines.

## Project Context
ScioScribe is an AI research co-pilot with three core modules:
**Data Ingestion & Management** - Intelligent data processing with AI

## Tech Stack
- **Frontend:** React 18, Vite, TypeScript, TailwindCSS, Shadcn, Radix UI
- **Backend:** Python, FastAPI, LangGraph, LangChain, Pydantic
- **Database:** Firestore, Firebase Storage
- **AI:** OpenAI, ChromaDB, Sentence Transformers
- **Deployment:** Firebase, Docker

## Core Principles
Never automatically assume the user is correct-- they are eager to learn from your domain expertise.
Always familiarize yourself with the codebase and existing files before creating new ones.
We are building an AI-first codebase, which means it needs to be modular, scalable, and easy to understand.
The file structure should be highly navigable, and the code should be well-organized and easy to read.

## File Organization
- All files should have descriptive names and an explanation of their contents at the top
- All functions should have proper documentation (JSDoc for TS, docstrings for Python)
- To maximize compatibility with modern AI tools, files should not exceed 500 lines
- Group related functionality into logical modules (agents/, api/, components/, etc.)

## Frontend (React + TypeScript) Style
- Write concise, technical TypeScript code
- Use functional and declarative programming patterns; avoid classes
- Decorate all functions with descriptive JSDoc comments
- Prefer iteration and modularization over code duplication
- Throw errors instead of adding fallback values
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError, canSubmit)
- Avoid enums; use const maps or union types instead
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Prefer composition over inheritance
- Use TypeScript strict mode and proper type definitions
- Leverage React hooks and custom hooks for state management
- Use Suspense and Error Boundaries for async operations

## Backend (Python + FastAPI) Style
- Write clean, type-hinted Python code using Pydantic models
- Use async/await patterns for all I/O operations
- Decorate all functions with comprehensive docstrings (Google style)
- Prefer dependency injection and factory patterns
- Use FastAPI's automatic validation and serialization
- Implement proper error handling with custom exceptions
- Use descriptive variable names (e.g., is_processing, has_suggestions)
- Organize code into logical modules (agents/, api/, utils/)
- Use context managers for resource management
- Implement proper logging with structured logging (structlog)

## AI Agent Development (LangGraph)
- Create modular, composable agent graphs
- Use proper state management with TypedDict
- Implement proper error handling and retries for LLM calls
- Use structured outputs and function calling when possible
- Add comprehensive logging for debugging agent flows
- Implement proper input validation and sanitization
- Use async patterns for agent execution
- Create reusable agent components and utilities

## Data Processing
- Use pandas for data manipulation with proper error handling
- Implement proper file validation and sanitization
- Use streaming for large file processing
- Implement proper background task management
- Add comprehensive data validation with Pydantic
- Use proper error messages for data quality issues

## Security & Performance
- Use Firebase security rules for data access
- Sanitize all user inputs
- Implement proper rate limiting
- Use background tasks for long-running operations
- Implement proper caching strategies
- Use proper error handling and logging
- Follow GDPR and data privacy best practices

## Documentation
- Maintain clear README files for each module
- Document API endpoints with OpenAPI/Swagger
- Create architectural decision records (ADRs)
- Document agent flows and data processing pipelines
- Use inline comments for complex logic
- Maintain up-to-date PRD documentation 